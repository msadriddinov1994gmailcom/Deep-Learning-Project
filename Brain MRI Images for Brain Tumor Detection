import os
import numpy as np
import random
import cv2
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

def openData(categories, path2dir):
    X = []
    Y = []
    
    #open data
    for category in categories:
        path = os.path.join(path2dir, category)
        class_num = categories.index(category)
        
        for img in os.listdir(path):
            img_array = cv2.imread(os.path.join(path, img))
            new_array = cv2.resize(img_array, (100,100))
            X.append(new_array)
            Y.append(class_num)
    
    #shuffle data     
    temp1 = list(zip(X,Y))
    random.shuffle(temp1)
    X, Y = zip(*temp1)
    X = np.asarray(X, dtype=None)
    Y = np.asarray(Y, dtype=None) 
    
    
    #split data
    X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42)
    X_train = (X_train.reshape(X_train.shape[0], -1).T)/255
    X_test = (X_test.reshape(X_test.shape[0],-1).T)/255
    y_train = y_train.reshape(y_train.shape[0],-1).T
    y_test = y_test.reshape(y_test.shape[0],-1).T
    
    return X_train, X_test, y_train, y_test


def sigmoid(z):
    
    s = 1/(1+np.exp(-z))
    
    return s

def initialize_with_zeros(dim):
    
    w = np.zeros((dim, 1))
    b = 0
    
    return w, b

def propagate(w, b, X, Y):
    
    m = X.shape[1]
    #FORWARD PROPAGE
    A = sigmoid(np.dot(w.T, X)+b)
    cost = -1/m*(np.dot(Y, np.log(A).T)+np.dot((1-Y),np.log(1-A).T))
    #BACKWARD PROPAGATE
    dw = 1/m*(np.dot(X, (A-Y).T))
    db = 1/m*(np.sum(A-Y))
    grads = {"dw": dw,
             "db": db}
    
    return grads, cost

def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):
    
    costs = []
    for i in range(num_iterations): 
        grads, cost = propagate(w,b,X,Y)
        dw = grads["dw"]
        db = grads["db"]
        w = w-learning_rate*dw
        b = b-learning_rate*db
        if i % 100 == 0:
            costs.append(cost)
        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
    
    params = {"w": w,
              "b": b}
    
    grads = {"dw": dw,
             "db": db}
    
    return params, grads, costs

def predict(w, b, X):
    
    m = X.shape[1]
    Y_prediction = np.zeros((1,m))
    w = w.reshape(X.shape[0], 1)
    A = sigmoid(np.dot(w.T, X)+b)
    for i in range(A.shape[1]):
        if (A[0][i] <=0.5):
            Y_prediction[0][i] = 0
        else:
            Y_prediction[0][i] = 1
            
    return Y_prediction

def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):
    w, b = initialize_with_zeros(X_train.shape[0])
    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    w = parameters["w"]
    b = parameters["b"]
    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)
    print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))

    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d
    
    c = ['no', 'yes']
p = r'C:\Users\msadr\brain1'
X_train, X_test, y_train, y_test = openData(c,p)

d = model(X_train, y_train, X_test, y_test, num_iterations = 2000, learning_rate = 0.005, print_cost = True)

